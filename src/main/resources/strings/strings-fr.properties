app_version=Affiche les informations de versions.
app_help=Affiche cette aide et quitte.
build_description=Construit un fichier binaire Android à partir de fichiers json/xml/raw.
build_example_1=[Rudimentaire]\n  java -jar APKEditor.jar b -i chemin/répertoire_d_entrée
build_example_2=[Spécifier la sortie]\n  java -jar APKEditor.jar b -i chemin/répertoire_d_entrée -o chemin/sortie.apk
build_example_3=[Restaurer les signatures]\n  java -jar APKEditor.jar b -t sig -i chemin/entrée.apk -sig chemin/répertoire_de_signatures
build_example_4=[Spécifier le framework]\n  java -jar APKEditor.jar b -i chemin/répertoire_d_entrée -framework framework-res.apk -framework plates-formes/android-32/android.jar
build_no_cache=Ignore les fichiers .dex préconstruits en cache et reconstruit les fichiers smali.
build_types=Types de construction, par défaut les types de construction sont déterminés par un balayage rapide des fichiers du répertoire d'entrée. Valeurs:
clean_meta=Nettoie le répertoire META-INF ainsi que le bloc de signature.
decode_description=Décode les fichiers binaires de ressources Android aux formats json/xml/raw lisibles.
decode_example_1=[Basic]\njava -jar APKEditor.jar d -i chemin/entrée.apk
decode_example_2=[Spécifier la sortie]\njava -jar APKEditor.jar d -i chemin/entrée.apk -o chemin/sortie.apk
decode_example_3=[Spécifier le type de décodage]\njava -jar APKEditor.jar d -t xml -i chemin/entrée.apk
decode_example_4=[Spécifier les fichiers de framework]\njava -jar APKEditor.jar d -i chemin/entrée.apk -framework framework-res.apk -framework plates-formes/android-32/android.jar
decode_example_5=[Décoder le bloc de signatures d'un fichier APK]\njava -jar APKEditor.jar d -t sig -i chemin/entrée.apk -sig chemin/répertoire_de_signatures
decode_types=Types de décodage\:
decode_usage=d [Options, commutateurs]
dump_dex_markers=Extrait les marqueurs des fichiers DEX (s'applique uniquement en mode smali).
duplicate_option_exception=Option en double '%s'.
empty_command_args_exception=Commande imcomplète, utiliser l'option « -h » pour obtenir de l'aide.
empty_command_option_exception=Options manquantes, ajouter l'option « -h » pour obtenir de l'aide.
force_delete=Entraîne la suppression du chemin de sortie.
framework_version_number=Numéro de version de framework privilégié.
help_description=Affiche cette aide et quitte.
help_main_footer=Pour obtenir de l'aide sur chaque commande, exécutez\:
info_activities=Affiche le nom de la classe d'activité principale. En mode verbeux, affiche toutes les activités déclarées, y compris les « <activity-alias> ».
info_app_class_name=Nom de la classe fille d' « Application ».
info_app_icon=Chemin/valeur de l'icône de l'application. En mode verbeux, affiche toutes les configurations.
info_app_icon_round=Chemin/valeur de l'icône ronde de l'application. En mode verbeux, affiche toutes les configurations.
info_app_name=Nom de l'application. En mode verbeux, affiche toutes les configurations.
info_app_version_code=Affiche la valeur de versionCode.
info_app_version_name=Affiche la valeur de versionName.
info_description=Affiche les informations du fichier APK.
info_dex=Affiche les informations des fichiers DEX.
info_example_1=[Rudimentaire]\n  java -jar APKEditor.jar info -i fichier.apk\n
info_example_2=[Spécifier la sortie et le type]\n  java -jar APKEditor.jar info -i chemin/entrée.apk -t json -v -o fichier_info.json\n
info_example_3=[Affiche uniquement le type spécifié]\n  java -jar APKEditor.jar info -i chemin/entrée.apk -resources -filter-type drawable
info_filter_type=Affiche uniquement les types de ressources spécifiés\n  *Cela s'applique uniquement lorsque le commutateur '-resources' est utilisé.\n  *Peut être multiple.
info_invalid_output_extension=Extension de fichier invalide ! Attendu '%s', '%s'
info_min_sdk_version=Version minimale du SDK.
info_package_name=Nom du paquet (identifiant de l'application) à partir du manifeste et, si le mode verbeux est activé, affiche les paquets de la table de ressources.
info_permissions=Autorisations.
info_print_types=Types/formats d'affichage\:
info_res=Affiche les entrées de ressources spécifiées par\:\n  1) ID de ressource hexadécimal ou décimal.\n  2) Nom de ressource complet e.g @string/app_name.\n *Peut être multiple.
info_resources=Affiche toutes les ressources.
info_signatures=Affihe les informations de signature.
info_signatures_base64=Affiche les informations de signature avec certificats base64.
info_target_sdk_version=Version cible du SDK.
info_verbose_mode=Mode Verbeux.
input_path=Chemin d'entrée.
invalid_sig_parameter_combination=Combinaison de paramètres non valide !\nRépertoire de signatures fourni mais « -t sig » est manquant.
invalid_type_format=Chaîne <%s> '%s' non valide.
keep_original_res=Conserve les chemins d'accès aux fichiers res/*\:\n  *S'applique uniquement lors du décodage en xml\n *Tous les fichiers « res/* » sont placés dans le répertoire « <res-files> »\n *Les chemins relatifs seront liés aux fichiers « values/*xml ».
merge_description=Fusionne les fichiers APK fractionnés à partir d'un répertoire ou de fichiers APK archivés comme XAPK, APKM, APKS...
merge_example_1=[Rudimentaire]\n  java -jar APKEditor.jar m -i chemin/entrée -o chemin/sortie.apk
missing_input_file=Fichier d'entrée manquant.
missing_sig_directory=Répertoire de signatures manquant.
missing_value_exception=Valeur manquante pour '%s'.
no_dex_debug=Supprime toutes les informations de débogage des fichiers smali/dex.
no_such_directory=Répertoire inexistant\: '%s'.
no_such_file=Fichier inexistant: '%s'.
no_such_file_or_directory=Fichier ou répertoire inexistant: '%s'.
output_path=Chemin de sortie. Facultatif, si non fourni, un nouveau fichier sera généré dans le même répertoire que celui d'entrée.
path_already_exists=Ce chemin existe déjà: '%s'.
path_is_directory_expect_file=Chemin d'un répertoire au lieu d'un fichier: '%s'.
path_is_file_expect_directory=Chemin d'un fichier au lieu d'un répertoire: '%s'.
path_of_framework=Chemin du fichier de framework (peut être multiple).
protect_description=Protège/Masque les fichiers de ressources, en utilisant des techniques d'odfuscation uniques.
protect_example_1=[Rudimentaire]\n  java -jar APKEditor.jar p -i chemin/entrée.apk -o chemin/sortie.apk
protect_skip_manifest=Préserve le manifeste.
raw_dex=Copie les fichiers DEX bruts / ignore smali.
res_dir_name=Définit le nom du répertoire des fichiers de ressources.\nPar exemple, pour l'obfuscation, assure le déplacement des fichiers de « res/* » vers « r/* » ou vice versa.
refactor_description=Refactorise les noms de ressources obscurcis.
refactor_example_1=[Rudimentaire]\n  java -jar APKEditor.jar x -i chemin/entrée.apk -o chemin/sortie.apk
refactor_fix_types=Corrige les noms des types de ressources en fonction de leurs utilisations et de leur valeurs.
refactor_public_xml=Chemin du fichier des IDs de ressources « public.xml ».\nLes noms seront appliqués aux ressources.
signatures_path=Chemin du répertoire de signatures.
split_json=Divise « resources.arsc » en plusieurs parties selon le type d'entrée (utilisez cette option pour les fichiers volumineux).
title_commands=Commandes\:
title_app_description=Éditeur de fichiers binaires de ressources Android
title_example=Exemples\:
title_flags=Commutateurs\:
title_options=Options\:
title_other_options=Autres options\:
title_usage=Utilisation\:
unknown_command_exception=Commande inconnue\: '%s'
unknown_option_exception=Option inconnue\: '%s'
validate_modules=Exige la même valeur « versionCode » pour le fichier base.apk et les fichiers APK fractionnés.
validate_resources_dir=Valide le nom du répertoire de ressources \n(par exemple, si le chemin d'un fichier de ressources drawable est « res/abc.png », il sera déplacé vers « res/drawable/abc.png »).
